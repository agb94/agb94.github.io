{"version":3,"file":"component---src-pages-index-js-427c24edaf960e72049a.js","mappings":"iKAkDA,IAvCY,WAAO,IAAD,EAgBVA,EAAM,WAfCC,EAAAA,EAAAA,gBAAe,cAeRC,KAAKC,oBAAb,aAAG,EAAwBH,OAEvC,OACE,uBAAKI,UAAU,OACb,gBAAC,EAAAC,EAAD,CACED,UAAU,aACVE,OAAO,QACPC,QAAS,CAAC,OAAQ,OAAQ,QAC1BC,IAAI,yBACJC,MAAO,IACPC,OAAQ,IACRC,QAAS,IACTC,IAAI,kBARN,uBAUCZ,MAAAA,OAAA,EAAAA,EAAQa,OACP,uCACa,8BAASb,EAAOa,MAD7B,MAC8Cb,MAAAA,OAAA,EAAAA,EAAQc,UAAW,S,oGCgBxE,EAlDa,WAAO,IAAD,EAkBXd,EAAM,WAjBCC,EAAAA,EAAAA,gBAAe,cAiBRC,KAAKC,oBAAb,aAAG,EAAwBH,OAEvC,OACE,uBAAKI,UAAU,QACb,qBAAGA,UAAU,QACX,qBAAGA,UAAU,mBADf,WAC4C,qBAAGW,KAAI,UAAYf,EAAOgB,OAAUhB,EAAOgB,SAGtFhB,MAAAA,OAAA,EAAAA,EAAQiB,SACN,qBAAGb,UAAU,QACX,qBAAGA,UAAU,iBADf,YAC2C,qBAAGW,KAAI,sBAAwBf,EAAOiB,QAAWjB,EAAOiB,UAIrGjB,MAAAA,OAAA,EAAAA,EAAQkB,KACN,qBAAGd,UAAU,QACb,qBAAGA,UAAU,mBADb,QACuC,qBAAGW,KAAMf,EAAOkB,IAAhB,YADvC,qBAC0FlB,EAAOmB,OADjG,MAMFnB,MAAAA,OAAA,EAAAA,EAAQoB,UACN,qBAAGhB,UAAU,QACX,qBAAGA,UAAU,qBADf,sBACyD,qBAAGW,KAAMf,EAAOoB,SAAUpB,EAAOoB,Y,mBCgBpG,EA1DkB,SAAC,GAAwB,IAAD,EAArBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACnBC,GAAY,UAAAF,EAAKnB,KAAKC,oBAAV,eAAwBqB,QAAxB,QACZC,EAAQJ,EAAKK,kBAAkBC,MAErC,OAAqB,IAAjBF,EAAMG,OAEN,gBAAC,IAAD,CAAQN,SAAUA,EAAUE,MAAOD,GACjC,gBAAC,IAAD,CAAKC,MAAM,SACX,gBAAC,IAAD,MACA,gBAAC,EAAD,MACA,qDAQJ,gBAAC,IAAD,CAAQF,SAAUA,EAAUE,MAAOD,GACjC,gBAAC,IAAD,CAAKC,MAAM,SACX,gBAAC,IAAD,MACA,gBAAC,EAAD,MACA,sBAAIK,MAAO,CAAEC,UAAU,SACpBL,EAAMM,KAAI,SAAAC,GACT,IAAMR,EAAQQ,EAAKC,YAAYT,OAASQ,EAAKE,OAAOC,KAEpD,OACE,sBAAIC,IAAKJ,EAAKE,OAAOC,MACnB,2BACE/B,UAAU,iBACViC,WAAS,EACTC,SAAS,6BAET,8BACE,0BACE,gBAAC,EAAAC,KAAD,CAAMC,GAAIR,EAAKE,OAAOC,KAAMM,SAAS,OACnC,wBAAMA,SAAS,YAAYjB,KAG/B,6BAAQQ,EAAKC,YAAYS,OAE3B,+BACE,qBACEC,wBAAyB,CACvBC,OAAQZ,EAAKC,YAAYY,aAAeb,EAAKc,SAE/CL,SAAS,0B","sources":["webpack://gatsby-starter-blog/./src/components/bio.js","webpack://gatsby-starter-blog/./src/components/info.js","webpack://gatsby-starter-blog/./src/pages/index.js"],"sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n            email\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n\n  return (\n    <div className=\"bio\">\n      <StaticImage\n        className=\"bio-avatar\"\n        layout=\"fixed\"\n        formats={[\"auto\", \"webp\", \"avif\"]}\n        src=\"../images/img-nobg.png\"\n        width={120}\n        height={120}\n        quality={100}\n        alt=\"Profile picture\"\n      />\n      {author?.name && (\n        <p>\n          My name is <strong>{author.name}</strong>. {author?.summary || null}\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default Bio\n","/**\n * Info component\n *\n */\n\n import * as React from \"react\"\n import { useStaticQuery, graphql } from \"gatsby\"\n//  import { StaticImage } from \"gatsby-plugin-image\"\n \n const Info = () => {\n   const data = useStaticQuery(graphql`\n     query InfoQuery {\n       site {\n         siteMetadata {\n           author {\n             email\n             github\n             website\n             cv\n             cvdate\n           }\n         }\n       }\n     }\n   `)\n \n   // Set these values by editing \"siteMetadata\" in gatsby-config.js\n   const author = data.site.siteMetadata?.author\n \n   return (\n     <div className=\"info\">\n       <p className=\"item\">\n         <i className=\"fa fa-envelope\"></i> Email: <a href={`mailto:${author.email}`}>{author.email}</a>\n       </p>\n\n       {author?.github && (\n          <p className=\"item\">\n            <i className=\"fa fa-github\"></i> GitHub: <a href={`https://github.com/${author.github}`}>{author.github}</a>\n          </p>\n       )}\n\n       {author?.cv && (\n          <p className=\"item\">\n          <i className=\"fa fa-file-pdf\"></i> CV: <a href={author.cv}>Download</a> (Last updated on {author.cvdate})\n          </p>\n       )}\n\n\n       {author?.website && (\n          <p className=\"item\">\n            <i className=\"fa fa-house-user\"></i> Research Website: <a href={author.website}>{author.website}</a>\n         </p>\n       )}\n\n\n     </div>\n   )\n }\n \n export default Info\n ","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Info from \"../components/info\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const posts = data.allMarkdownRemark.nodes\n\n  if (posts.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle}>\n        <Seo title=\"Home\" />\n        <Bio />\n        <Info />\n        <p>\n          No blog posts found ðŸ¥².\n        </p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo title=\"Home\" />\n      <Bio />\n      <Info />\n      <ol style={{ listStyle: `none` }}>\n        {posts.map(post => {\n          const title = post.frontmatter.title || post.fields.slug\n\n          return (\n            <li key={post.fields.slug}>\n              <article\n                className=\"post-list-item\"\n                itemScope\n                itemType=\"http://schema.org/Article\"\n              >\n                <header>\n                  <h2>\n                    <Link to={post.fields.slug} itemProp=\"url\">\n                      <span itemProp=\"headline\">{title}</span>\n                    </Link>\n                  </h2>\n                  <small>{post.frontmatter.date}</small>\n                </header>\n                <section>\n                  <p\n                    dangerouslySetInnerHTML={{\n                      __html: post.frontmatter.description || post.excerpt,\n                    }}\n                    itemProp=\"description\"\n                  />\n                </section>\n              </article>\n            </li>\n          )\n        })}\n      </ol>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: {frontmatter: {show: {eq: true}}}\n      ) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n        }\n      }\n    }\n  }\n`\n"],"names":["author","useStaticQuery","site","siteMetadata","className","S","layout","formats","src","width","height","quality","alt","name","summary","href","email","github","cv","cvdate","website","data","location","siteTitle","title","posts","allMarkdownRemark","nodes","length","style","listStyle","map","post","frontmatter","fields","slug","key","itemScope","itemType","Link","to","itemProp","date","dangerouslySetInnerHTML","__html","description","excerpt"],"sourceRoot":""}