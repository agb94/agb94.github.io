<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Gatsby Starter Blog RSS Feed]]></title><description><![CDATA[Gabin's (virtual) home]]></description><link>https://agb94.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Fri, 11 Aug 2023 15:00:39 GMT</lastBuildDate><item><title><![CDATA[AutoFL: A Preliminary Evaluation of LLM-Based Fault Localization]]></title><description><![CDATA[My colleague Sungmin and I have been collaborating on using language models ü§ñ to solve the automated fault localization. Our approach‚Ä¶]]></description><link>https://agb94.github.io/autofl/</link><guid isPermaLink="false">https://agb94.github.io/autofl/</guid><pubDate>Sat, 12 Aug 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;My colleague Sungmin and I have been collaborating on using language models ü§ñ to solve the automated fault localization. Our approach involves having the language model autonomously extract information during debugging, similar to how human developers rely on diverse sources. This has yielded promising results: when provided with a single failing test and basic functions, our language models outperform Spectrum-Based Fault Localization (SBFL), in terms of the number of perfect predictions. Feel free to check out our preprint for more details (&lt;a href=&quot;https://arxiv.org/abs/2308.05487&quot;&gt;https://arxiv.org/abs/2308.05487&lt;/a&gt;), and don‚Äôt hesitate to reach out if you have any questions!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[[ICSE'23] Fonte: Finding Bug Inducing Commits from Failures]]></title><description><![CDATA[I am thrilled to share the exciting news that our paper titled ‚ÄúFonte: Finding Bug Inducing Commits from Failures‚Äù has been accepted at ICSE‚Ä¶]]></description><link>https://agb94.github.io/fonte/</link><guid isPermaLink="false">https://agb94.github.io/fonte/</guid><pubDate>Wed, 01 Feb 2023 13:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I am thrilled to share the exciting news that our paper titled &lt;a href=&quot;https://coinse.github.io/publications/pdfs/An2023aa.pdf&quot;&gt;‚ÄúFonte: Finding Bug Inducing Commits from Failures‚Äù&lt;/a&gt; has been accepted at ICSE 2023. This work builds upon our previous research on &lt;a href=&quot;https://coinse.github.io/publications/pdfs/An2021qb.pdf&quot;&gt;Reducing the Search Space of Bug Inducing Commits (BICs) Using Failure Coverage&lt;/a&gt;, where we proposed a technique to narrow down the search space for bug-inducing commits using the coverage of failing executions. In this latest paper, we introduce a novel method, named Fonte, for quantifying the suspiciousness of commits, moving beyond mere search space reduction.&lt;/p&gt;
&lt;p&gt;Fonte is founded on a unique combination of Fault Localization (FL) and commit history mining. The core idea behind our approach is that&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A commit is more likely to be a BIC if it introduced or modified code that is relevant to a particular failure.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To measure the relevance of code elements to the observed failure, we employ Fault Localization techniques. We then devise a voting system wherein each code element ‚Äúvotes‚Äù for the commits that introduced or modified it. The voting power of a code element is determined by its FL ranking, with a decay factor applied to older commits. This decay factor stems from our hypothesis that older commits are less likely to be responsible for the current failure.&lt;/p&gt;
&lt;p&gt;Our evaluation demonstrates that Fonte is highly effective in identifying bug-inducing commits based on fault localization scores and exhibits superior performance compared to IR-based BIC identification techniques. The detailed results and findings can be found in our paper!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[[ISSTA'22] FDG: A Precise Measurement of Fault Diagnosability Gain of Test Cases]]></title><description><![CDATA[I am delighted to announce that our paper titled ‚ÄúFDG: A Precise Measurement of Fault Diagnosability Gain of Test Cases‚Äù has been accepted‚Ä¶]]></description><link>https://agb94.github.io/fdg/</link><guid isPermaLink="false">https://agb94.github.io/fdg/</guid><pubDate>Sun, 12 Jun 2022 13:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I am delighted to announce that our paper titled &lt;a href=&quot;https://coinse.github.io/publications/pdfs/An2022pb.pdf&quot;&gt;‚ÄúFDG: A Precise Measurement of Fault Diagnosability Gain of Test Cases‚Äù&lt;/a&gt; has been accepted at ACM SIGSOFT International Symposium on Software Testing and Analysis (ISSTA 2022)! This work proposes a novel measure FDG to quantify the fault diagnosability gain of individual test cases. Using the test coverage and the ongoing Fault Localisation (FL) results, FDG can precisely measure how much diagnosability gain each test can bring to the current test suite i.e., the fault-finding capability of a test case.&lt;/p&gt;
&lt;p&gt;FDG help developers and testers to prioritize the most effective test cases for enhancing the test suite. This is especially helpful in the following fault localization scenarios:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Iterative Fault Localization: When the current test suite‚Äôs fault diagnosability is low, and traditional SBFL (Spectrum-Based Fault Localization) techniques are not yielding satisfactory results, additional test cases can be generated using automated test generation tools. In that case, whether each of the auto-gen test cases is revealing the fault or not (= oracle problem) should be checked by developers or testers before they are used for fault localization. However, manually inspecting all the generated test cases can be time-consuming and impractical. In this situation, FDG can help prioritize the most valuable auto-generated test cases that are expected to improve the FL accuracy the most, thus saving valuable developer time.&lt;/li&gt;
&lt;li&gt;Selective Test Case Addition: During regression testing, a subset of test cases is often selected to minimize test execution costs while maintaining fault detection ability. However, when test failures occur, it may be necessary to add not-executed test cases to improve fault localization accuracy. FDG can aid in this process by using past coverage information of not-executed test cases as a proxy for their actual coverage and selecting the most promising test cases within a given budget.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I‚Äôm excited about sharing our findings at the conference and look forward to discussing our work with the SE community!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[[ICSE'22] Automatically Identifying Shared Root Causes of Test Breakages in SAP HANA]]></title><description><![CDATA[I‚Äôm excited to share that our paper titled ‚ÄúAutomatically Identifying Shared Root Causes of Test Breakages in SAP HANA‚Äù has been accepted‚Ä¶]]></description><link>https://agb94.github.io/sap_failure_clustering/</link><guid isPermaLink="false">https://agb94.github.io/sap_failure_clustering/</guid><pubDate>Sun, 01 May 2022 13:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I‚Äôm excited to share that our paper titled &lt;a href=&quot;https://coinse.github.io/publications/pdfs/An2022qe.pdf&quot;&gt;‚ÄúAutomatically Identifying Shared Root Causes of Test Breakages in SAP HANA‚Äù&lt;/a&gt; has been accepted for presentation in the &lt;strong&gt;Software Engineering In Practice&lt;/strong&gt; track at the 44th IEEE/ACM International Conference on Software Engineering (ICSE 2022). This collaborative work, conducted in partnership with COINSE and SAP Labs Korea üòâ, focuses on identifying the shared root causes among test failures. By accurately measuring the test failure similarity, we can group similar failures together when presenting them to developers and prevent an overwhelming number of bug reports. The study involves evaluating and comparing these similarity metrics using CI data from SAP HANA, a commercial database system. The investigation reveals that various information sources, such as static, dynamic, and historical data, complement each other, with the dynamic similarity metric performing best. I really look forward to presenting our work at ICSE 2022!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[New Beginnings]]></title><description><![CDATA[This is my first post on this new blog. How exciting! üòã To make this blog, I used Gatsby.
It is pretty easy to make a website with Gatsby‚Ä¶]]></description><link>https://agb94.github.io/new_beginnings/</link><guid isPermaLink="false">https://agb94.github.io/new_beginnings/</guid><pubDate>Tue, 26 Apr 2022 13:40:32 GMT</pubDate><content:encoded>&lt;p&gt;This is my first post on this new blog. How exciting! üòã&lt;/p&gt;
&lt;p&gt;To make this blog, I used &lt;a href=&quot;https://www.gatsbyjs.com/&quot;&gt;Gatsby&lt;/a&gt;.
It is pretty easy to make a website with Gatsby because there are plenty of
great starter packs. I used one of the most popular themes:
&lt;a href=&quot;https://github.com/gatsbyjs/gatsby-starter-blog&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;gatsby-starter-blog&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h5&gt;Brief Tutorial: How to make a blog with Gatsby&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Prerequisite: &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;1. Enable &lt;a href=&quot;https://github.com/nodejs/corepack&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;corepack&lt;/code&gt;&lt;/a&gt;&lt;/h6&gt;
&lt;blockquote&gt;
&lt;p&gt;Corepack is a zero-runtime-dependency Node.js script that comes
with the installation of Node.js.
If you enable corepack, you can use &lt;code class=&quot;language-text&quot;&gt;Yarn&lt;/code&gt;, a JavaScript package manager.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;corepack &lt;span class=&quot;token builtin class-name&quot;&gt;enable&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;2. Install &lt;code class=&quot;language-text&quot;&gt;gatsby-cli&lt;/code&gt; using &lt;code class=&quot;language-text&quot;&gt;yarn&lt;/code&gt;&lt;/h6&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;yarn&lt;/span&gt; global &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; gatsby-cli&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;3. Create a new project with a pre-made template.&lt;/h6&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;gatsby new &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;your-blog-name&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; https://github.com/gatsbyjs/gatsby-starter-blog
&lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;your-blog-name&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
gatsby develop &lt;span class=&quot;token comment&quot;&gt;# run the development server&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can now check out your blog at &lt;a href=&quot;http://localhost:8000/&quot;&gt;http://localhost:8000/&lt;/a&gt;.&lt;/p&gt;
&lt;h6&gt;4. Customize your website&lt;/h6&gt;
&lt;p&gt;Have no clue?
Here are &lt;a href=&quot;https://github.com/agb94/agb94.github.io/tree/develop&quot;&gt;the changes&lt;/a&gt; that I made to this website.&lt;/p&gt;
&lt;h6&gt;5. Deploy your website with GitHub Pages&lt;/h6&gt;
&lt;p&gt;First, you need to create a new repository on GitHub.
The repository name should be &lt;code class=&quot;language-text&quot;&gt;&amp;lt;your-github-id&gt;.github.io&lt;/code&gt; (this will be the url for your website).&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; init &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; remote &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; origin https://github.com/&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;your-github-id&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;/&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;your-github-id&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;.github.io
&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; gh-pages --save-dev&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next, add the deploy command &lt;code class=&quot;language-text&quot;&gt;gatsby build &amp;amp;&amp;amp; gh-pages -d public -b main&lt;/code&gt; to &lt;code class=&quot;language-text&quot;&gt;package.json&lt;/code&gt;.
You can use any branch name other than &lt;code class=&quot;language-text&quot;&gt;main&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token property&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;build&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;gatsby build&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;develop&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;gatsby develop&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;deploy&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;gatsby build &amp;amp;&amp;amp; gh-pages -d public -b main&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; # add this!
    &lt;span class=&quot;token property&quot;&gt;&quot;format&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;prettier --write \&quot;**/*.{js,jsx,ts,tsx,json,md}\&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;gatsby develop&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;serve&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;gatsby serve&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;clean&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;gatsby clean&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;echo \&quot;Write tests! -&gt; https://gatsby.dev/unit-testing\&quot; &amp;amp;&amp;amp; exit 1&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, this command will automatically deploy your blog to GitHub Pages with
GitHub actions. This may take up a few minutes.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; run deploy&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;</content:encoded></item></channel></rss>